# Use the front controller as index file. It serves as a fallback solution when
# every other rewrite/redirect fails (e.g. in an aliased environment without
# mod_rewrite). Additionally, this reduces the matching process for the
# start page (path "/") because otherwise Apache will apply the rewriting rules
# to each configured DirectoryIndex file (e.g. index.php, index.html, index.pl).
DirectoryIndex index.php

# By default, Apache does not evaluate symbolic links if you did not enable this
# feature in your server configuration. Uncomment the following line if you
# install assets as symlinks or if you experience problems related to symlinks
# when compiling LESS/Sass/CoffeScript assets.
# Options FollowSymlinks

# Disabling MultiViews prevents unwanted negotiation, e.g. "/index" should not resolve
# to the front controller "/index.php" but be rewritten to "/index.php/index".
<IfModule mod_negotiation.c>
    Options -MultiViews
</IfModule>

<IfModule mod_rewrite.c>
    RewriteEngine On

    # Determine the RewriteBase automatically and set it as environment variable.
    # If you are using Apache aliases to do mass virtual hosting or installed the
    # project in a subdirectory, the base path will be prepended to allow proper
    # resolution of the index.php file and to redirect to the correct URI. It will
    # work in environments without path prefix as well, providing a safe, one-size
    # fits all solution. But as you do not need it in this case, you can comment
    # the following 2 lines to eliminate the overhead.
    RewriteCond %{REQUEST_URI}::$1 ^(/.+)/(.*)::\2$
    RewriteRule ^(.*) - [E=BASE:%1]

    # Sets the HTTP_AUTHORIZATION header removed by Apache
    RewriteCond %{HTTP:Authorization} .
    RewriteRule ^ - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

    # remove the .php from the request
    RewriteCond %{REQUEST_FILENAME}.php -f
    RewriteRule !.*\.php$ %{REQUEST_FILENAME}.php [QSA,L]

    # Redirect to URI without front controller to prevent duplicate content
    # (with and without `/index.php`). Only do this redirect on the initial
    # rewrite by Apache and not on subsequent cycles. Otherwise we would get an
    # endless redirect loop (request -> rewrite to front controller ->
    # redirect -> request -> ...).
    # So in case you get a "too many redirects" error or you always get redirected
    # to the start page because your Apache does not expose the REDIRECT_STATUS
    # environment variable, you have 2 choices:
    # - disable this feature by commenting the following 2 lines or
    # - use Apache >= 2.3.9 and replace all L flags by END flags and remove the
    #   following RewriteCond (best solution)
    RewriteCond %{ENV:REDIRECT_STATUS} ^$
    RewriteRule ^index\.php(?:/(.*)|$) %{ENV:BASE}/$1 [R=301,L]

    # If the requested filename exists, simply serve it.
    # We only want to let Apache serve files and not directories.
    RewriteCond %{REQUEST_FILENAME} -f
    RewriteRule ^ - [L]

    # Rewrite all other queries to the frontpage.
    RewriteRule ^ %{ENV:BASE}/index.php [L]
</IfModule>

<IfModule !mod_rewrite.c>
    <IfModule mod_alias.c>
        # When mod_rewrite is not available, we instruct a temporary redirect of
        # the start page to the front controller explicitly so that the website
        # and the generated links can still be used.
        RedirectMatch 307 ^/$ /index.php/
        # RedirectTemp cannot be used instead
    </IfModule>
</IfModule>


# Serve resources with the proper media types (f.k.a. MIME types).
<IfModule mod_mime.c>
  # Web fonts
    AddType font/ttf                                    ttf
    AddType font/opentype                               otf

</IfModule>

# Serve all resources labeled as `text/html` or `text/plain`
# with the media type `charset` parameter set to `UTF-8`.
AddDefaultCharset utf-8

# Serve the following file types with the media type `charset`
# parameter set to `UTF-8`.
<IfModule mod_mime.c>
    AddCharset utf-8 .css
</IfModule>

# Redirect from the `http://` to the `https://` version of the URL.
<IfModule mod_rewrite.c>
    RewriteEngine On
    RewriteCond %{HTTPS} !=on
    RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]
</IfModule>

# Force client-side SSL redirection.
<IfModule mod_headers.c>
    # 31536000 to activate for one year
    # includeSubDomains to transitive include subdomains
    # preload to include in chrome
    Header always set Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
</IfModule>


# Prevent some browsers from MIME-sniffing the response.
<IfModule mod_headers.c>
    Header set X-Content-Type-Options "nosniff"
</IfModule>

# Set referrer policy (disable all potentially leaking information)
<IfModule mod_headers.c>
    Header set Referrer-Policy: no-referrer
</IfModule>

# Protect website against clickjacking.
<IfModule mod_headers.c>
    # prevent the page to be framed by others. also enforced by the CSP header (frame-ancestors falls back to 'none')
    Header set X-Frame-Options "DENY"

    # `mod_headers` cannot match based on the content-type, however,
    # the `X-Frame-Options` response header should be send only for
    # HTML documents and not for the other resources.
    <FilesMatch "\.(css|jpe?g|png|otf|ttf|pdf)$">
        Header unset X-Frame-Options
    </FilesMatch>

</IfModule>

# (1) Try to re-enable the cross-site scripting (XSS) filter built
#     into most web browsers.
#
# (2) Prevent web browsers from rendering the web page if a potential
#     reflected (a.k.a non-persistent) XSS attack is detected by the
#     filter.

<IfModule mod_headers.c>

    #                           (1)    (2)
    Header set X-XSS-Protection "1; mode=block"

    # `mod_headers` cannot match based on the content-type, however,
    # the `X-XSS-Protection` response header should be send only for
    # HTML documents and not for the other resources.
    <FilesMatch "\.(css|jpe?g|png|otf|ttf|pdf)$">
        Header unset X-XSS-Protection
    </FilesMatch>

</IfModule>


# Mitigate the risk of cross-site scripting and other content-injection
# attacks.
<IfModule mod_headers.c>
    # if the Content-Security-Policy header causes problems, change it to
    # Content-Security-Policy-Report-Only: ; report-uri https://endpoint.com;
    # to receive a report of the violations

    # block-all-mixed-content prevents http requests in http site
    # default-src none prevents access to unspecified fetch directives
    # base-uri self ensures the <base> element is set to the current url
    # connect-self restrics notably <a>, XMLHttpRequest
    # script-src 'self' 'unsafe-eval' 'unsafe-inline' is needed to get vueJS to run with the current config. this can be changed later
    # style-src 'self' 'unsafe-inline' is needed because some styles are set directly by vuejs
    # font-src 'self'; to load fonts from same domain
    # img-src 'self' data:; to load images from same domain and allow from data attributes
    # form-action 'self'; to submit forms only to same domain
    Header set Content-Security-Policy "block-all-mixed-content; default-src 'none'; base-uri 'self'; style-src 'self'; scrict-src 'sha256-Q74Mem0eRpiSvtyCPQDipO8gCzi/TcpmfAjYqHFKeJw='; font-src 'self'; img-src 'self'"
    Header set X-Content-Security-Policy "block-all-mixed-content; default-src 'none'; base-uri 'self'; style-src 'self'; scrict-src 'sha256-Q74Mem0eRpiSvtyCPQDipO8gCzi/TcpmfAjYqHFKeJw='; font-src 'self'; img-src 'self'"
    Header set X--WebKit-CSP "block-all-mixed-content; default-src 'none'; base-uri 'self'; style-src 'self'; scrict-src 'sha256-Q74Mem0eRpiSvtyCPQDipO8gCzi/TcpmfAjYqHFKeJw='; font-src 'self'; img-src 'self'"

    # `mod_headers` cannot match based on the content-type, however,
    # the `Content-Security-Policy` response header should be send
    # only for HTML documents and not for the other resources.
    <FilesMatch "\.(css|jpe?g|png|otf|ttf|pdf)$">
        Header unset Content-Security-Policy
    </FilesMatch>
</IfModule>



# Remove the `X-Powered-By` response header that:
<IfModule mod_headers.c>
    Header unset X-Powered-By
</IfModule>

# Prevent Apache from adding a trailing footer line containing
# information about the server to the server-generated documents
# (e.g.: error messages, directory listings, etc.)
ServerSignature Off

# Prevent Apache from publishing exact server version
# disabled because hostpoint deploy does not allow it
# consider activing when switching providers
# ServerTokens Prod

# Compress HTML, CSS, JavaScript, Text, XML and fonts
<IfModule mod_deflate.c>

    # Force compression for mangled `Accept-Encoding` request headers
    <IfModule mod_setenvif.c>
        <IfModule mod_headers.c>
            SetEnvIfNoCase ^(Accept-EncodXng|X-cept-Encoding|X{15}|~{15}|-{15})$ ^((gzip|deflate)\s*,?\s*)+|[X~-]{4,13}$ HAVE_Accept-Encoding
            RequestHeader append Accept-Encoding "gzip,deflate" env=HAVE_Accept-Encoding
        </IfModule>
    </IfModule>

    # Compress all output labeled with one of the following media types.
    <IfModule mod_filter.c>
        AddOutputFilterByType DEFLATE "application/x-font-ttf" \
                                      "font/opentype" \
                                      "font/otf" \
                                      "font/ttf" \
                                      "text/css" \
                                      "text/html"

    </IfModule>

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Map the following filename extensions to the specified
    # encoding type to serve the file types
    # with the appropriate `Content-Encoding` response header

    <IfModule mod_mime.c>
        AddEncoding gzip              svgz
    </IfModule>

</IfModule>

<IfModule mod_headers.c>
    # no-transform to prevent caches/proxies from transforming data
    # private is set by symfony whenever someone is logged in
    Header merge Cache-Control "no-transform"
</IfModule>


# remove ETags from files as resources are sent with far-future expires headers.
FileETag None

<IfModule mod_headers.c>
    # Remove ETags header as the FileETag None command does not work always
    Header unset ETag
</IfModule>


# Serve resources with far-future expires headers.
<IfModule mod_expires.c>

    ExpiresActive on
    ExpiresDefault                                      "access plus 1 year"

    # Exception for HTML
    ExpiresByType text/html                             "access plus 0 seconds"

</IfModule>
